--- rustc-1.65.0-src/src/bootstrap/dist.rs.orig	2022-11-15 15:13:16.662631856 +0100
+++ rustc-1.65.0-src/src/bootstrap/dist.rs	2022-11-15 15:21:43.839163173 +0100
@@ -372,7 +372,7 @@
                     target: compiler.host,
                 })
                 .expect("rust-analyzer-proc-macro-server always builds");
-            builder.install(&ra_proc_macro_srv, &image.join("libexec"), 0o755);
+            builder.install(&ra_proc_macro_srv, &image.join("lib"), 0o755);
 
             let libdir_relative = builder.libdir_relative(compiler);
 
@@ -980,7 +980,7 @@
         for dirent in fs::read_dir(cargo.parent().unwrap()).expect("read_dir") {
             let dirent = dirent.expect("read dir entry");
             if dirent.file_name().to_str().expect("utf8").starts_with("cargo-credential-") {
-                tarball.add_file(&dirent.path(), "libexec", 0o755);
+                tarball.add_file(&dirent.path(), "lib", 0o755);
             }
         }
 
--- rustc-1.65.0-src/src/tools/cargo/src/cargo/ops/registry/auth.rs.orig	2022-11-15 15:14:32.082122963 +0100
+++ rustc-1.65.0-src/src/tools/cargo/src/cargo/ops/registry/auth.rs	2022-11-15 15:22:08.578992771 +0100
@@ -213,7 +213,7 @@
     Ok(token)
 }
 
-/// Gets the path to the libexec processes in the sysroot.
+/// Gets the path to the lib processes in the sysroot.
 fn sysroot_credential(
     config: &Config,
     process: &(PathBuf, Vec<String>),
@@ -224,7 +224,7 @@
         .parent()
         .and_then(|p| p.parent())
         .ok_or_else(|| format_err!("expected cargo path {}", cargo.display()))?;
-    let exe = root.join("libexec").join(format!(
+    let exe = root.join("lib").join(format!(
         "cargo-credential-{}{}",
         cred_name,
         std::env::consts::EXE_SUFFIX
--- rustc-1.65.0-src/src/tools/rust-analyzer/crates/rust-analyzer/src/reload.rs.orig	2022-11-15 15:16:45.801216124 +0100
+++ rustc-1.65.0-src/src/tools/rust-analyzer/crates/rust-analyzer/src/reload.rs	2022-11-15 15:22:34.388815010 +0100
@@ -321,7 +321,7 @@
                             if let Some(sysroot) = sysroot.as_ref() {
                                 tracing::debug!("Found a cargo workspace with a sysroot...");
                                 let server_path =
-                                    sysroot.root().join("libexec").join(&standalone_server_name);
+                                    sysroot.root().join("lib").join(&standalone_server_name);
                                 if std::fs::metadata(&server_path).is_ok() {
                                     tracing::debug!(
                                         "And the server exists at {}",
